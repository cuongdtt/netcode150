# Cursor Rules for LeetCode Problem Solving Repository

## ðŸš€ AUTOMATED PROMPT TEMPLATE SELECTION

**CRITICAL**: When user provides specific commands, automatically apply the corresponding prompt template WITHOUT asking for confirmation:

| User Command | Auto-Apply Template | Action |
|--------------|-------------------|---------|
| `gen {number}` | `@docs/leetcode-prompt-template.md` | Generate LeetCode problem setup |
| `check {number}` | `@docs/check-prompt-template.md` | Analyze and verify solution |
| `solution {number}` | `@docs/solution-prompt-template.md` | Generate AI-powered solutions |
| `problem {number}` | `@docs/problem-template.md` | Create problem structure template |

### Command Aliases (all trigger same templates):
- **Generation**: `gen`, `generate`, `create`, `setup` â†’ `@docs/leetcode-prompt-template.md`
- **Analysis**: `check`, `analyze`, `verify`, `test`, `validate` â†’ `@docs/check-prompt-template.md`
- **Solution**: `solution`, `solve`, `implement`, `code` â†’ `@docs/solution-prompt-template.md`
- **Template**: `problem`, `template`, `structure` â†’ `@docs/problem-template.md`

### Processing Logic:
```
IF user_input matches pattern "{command} {number}":
    â†’ IMMEDIATELY apply corresponding template
    â†’ NO confirmation needed
    â†’ Execute template instructions automatically
```

## JavaScript Files (.js)
- DO NOT provide code completions or suggestions for .js files
- DO NOT auto-implement function bodies 
- DO NOT suggest algorithms or solutions during typing
- User will manually implement all function logic
- Only provide syntax highlighting and basic formatting

## Chat/Validation Mode
- ALLOW chat-based solution validation and discussion
- ALLOW explaining algorithms when user asks
- ALLOW reviewing user's completed solutions
- ALLOW helping with debugging and optimization
- Focus on teaching rather than providing direct answers

## Test Files (.test.js)
- Allow suggestions for test structure and Jest syntax
- Help with test case organization
- Assist with assertion statements

## Documentation Files (.md)
- Provide markdown formatting assistance
- Help with documentation structure
- Allow content suggestions for problem descriptions

## Template Execution Rules

### Automatic Template Application:
- **NEVER ask user to confirm template selection** - apply immediately
- **ALWAYS follow template instructions completely** - don't skip steps
- **REFERENCE template files directly** using @ syntax when needed
- **EXECUTE all template workflows** as specified in the docs

### Template Priority Order:
1. **First**: Detect command pattern in user input
2. **Second**: Auto-select corresponding template file
3. **Third**: Apply template instructions without deviation
4. **Fourth**: Execute all required actions from template

### Error Handling:
- If command pattern unclear, ask for clarification
- If template file missing, notify user and suggest alternatives
- If template execution fails, provide specific error details

## General Rules
- Never auto-complete LeetCode solution algorithms while typing
- Support learning through chat-based validation and explanation
- Focus on project structure and tooling support
- Maintain clean separation between setup and implementation
- **ALWAYS use automated template selection for recognized commands**
- **NEVER bypass template system for gen/check/solution/problem commands**